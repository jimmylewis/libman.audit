using NSubstitute;

namespace Libman.Audit.Tests;

public class VulnerabilityAnalyzerTests
{
    private readonly IGitHubAdvisoryClient _advisoryClient;
    private readonly ILogger _logger;
    private readonly VulnerabilityAnalyzer _sut;

    public VulnerabilityAnalyzerTests()
    {
        _advisoryClient = Substitute.For<IGitHubAdvisoryClient>();
        _logger = Substitute.For<ILogger>();
        _sut = new VulnerabilityAnalyzer(_advisoryClient, _logger);
    }

    [Fact]
    public async Task AnalyzePackagesAsync_NoVulnerabilities_ReturnsEmptyList()
    {
        // Arrange
        var packages = new List<LibmanPackage>
        {
            new() { Name = "jquery", Version = "3.6.0", Provider = "cdnjs" }
        };

        _advisoryClient.GetAdvisoriesAsync("jquery", "3.6.0")
            .Returns(new AdvisoryResult(new List<GitHubAdvisory>()));

        // Act
        var result = await _sut.AnalyzePackagesAsync(packages);

        // Assert
        Assert.Empty(result);
    }

    [Fact]
    public async Task AnalyzePackagesAsync_HasWarning_LogsWarning()
    {
        // Arrange
        var packages = new List<LibmanPackage>
        {
            new() { Name = "jquery", Version = "3.6.0", Provider = "cdnjs" }
        };

        _advisoryClient.GetAdvisoriesAsync("jquery", "3.6.0")
            .Returns(new AdvisoryResult(new List<GitHubAdvisory>(), "Some warning message"));

        // Act
        var result = await _sut.AnalyzePackagesAsync(packages);

        // Assert
        _logger.Received(1).LogWarning("Some warning message");
        Assert.Empty(result);
    }

    [Fact]
    public async Task AnalyzePackagesAsync_SingleVulnerability_ReturnsVulnerablePackage()
    {
        // Arrange
        var packages = new List<LibmanPackage>
        {
            new() { Name = "jquery", Version = "3.6.0", Provider = "cdnjs" }
        };

        var advisories = new List<GitHubAdvisory>
        {
            new() { Severity = "Medium", Description = "Test vulnerability" }
        };

        _advisoryClient.GetAdvisoriesAsync("jquery", "3.6.0")
            .Returns(new AdvisoryResult(advisories));

        // Act
        var result = await _sut.AnalyzePackagesAsync(packages);

        // Assert
        Assert.Single(result);
        Assert.Equal("jquery", result[0].Name);
        Assert.Equal("3.6.0", result[0].Version);
        Assert.Equal("cdnjs", result[0].Provider);
        Assert.Equal(1, result[0].VulnerabilityCount);
        Assert.Equal("Medium", result[0].Severity);
        Assert.Equal("1 Medium", result[0].Description);
    }

    [Fact]
    public async Task AnalyzePackagesAsync_MultipleVulnerabilities_ReturnsMixedSeverity()
    {
        // Arrange
        var packages = new List<LibmanPackage>
        {
            new() { Name = "jquery", Version = "3.6.0", Provider = "cdnjs" }
        };

        var advisories = new List<GitHubAdvisory>
        {
            new() { Severity = "Low", Description = "Low vulnerability" },
            new() { Severity = "Medium", Description = "Medium vulnerability" },
            new() { Severity = "High", Description = "High vulnerability" }
        };

        _advisoryClient.GetAdvisoriesAsync("jquery", "3.6.0")
            .Returns(new AdvisoryResult(advisories));

        // Act
        var result = await _sut.AnalyzePackagesAsync(packages);

        // Assert
        Assert.Single(result);
        Assert.Equal("jquery", result[0].Name);
        Assert.Equal(3, result[0].VulnerabilityCount);
        Assert.Equal("High", result[0].Severity); // Should get highest severity
        Assert.Contains("1 Low", result[0].Description);
        Assert.Contains("1 Medium", result[0].Description);
        Assert.Contains("1 High", result[0].Description);
    }

    [Fact]
    public async Task AnalyzePackagesAsync_MultipleVulnerabilitiesOfSameSeverity_CountsCorrectly()
    {
        // Arrange
        var packages = new List<LibmanPackage>
        {
            new() { Name = "jquery", Version = "3.6.0", Provider = "cdnjs" }
        };

        var advisories = new List<GitHubAdvisory>
        {
            new() { Severity = "Medium", Description = "First vulnerability" },
            new() { Severity = "Medium", Description = "Second vulnerability" },
            new() { Severity = "Medium", Description = "Third vulnerability" }
        };

        _advisoryClient.GetAdvisoriesAsync("jquery", "3.6.0")
            .Returns(new AdvisoryResult(advisories));

        // Act
        var result = await _sut.AnalyzePackagesAsync(packages);

        // Assert
        Assert.Single(result);
        Assert.Equal(3, result[0].VulnerabilityCount);
        Assert.Equal("Medium", result[0].Severity);
        Assert.Equal("3 Medium", result[0].Description);
    }

    [Fact]
    public async Task AnalyzePackagesAsync_NullOrEmptySeverity_HandlesAsUnknown()
    {
        // Arrange
        var packages = new List<LibmanPackage>
        {
            new() { Name = "jquery", Version = "3.6.0", Provider = "cdnjs" }
        };

        var advisories = new List<GitHubAdvisory>
        {
            new() { Severity = null!, Description = "Null severity" },
            new() { Severity = "", Description = "Empty severity" }
        };

        _advisoryClient.GetAdvisoriesAsync("jquery", "3.6.0")
            .Returns(new AdvisoryResult(advisories));

        // Act
        var result = await _sut.AnalyzePackagesAsync(packages);

        // Assert
        Assert.Single(result);
        Assert.Equal(2, result[0].VulnerabilityCount);
        Assert.Equal("Unknown", result[0].Severity);
        Assert.Equal("2 Unknown", result[0].Description);
    }

    [Fact]
    public async Task AnalyzePackagesAsync_MultiplePackages_ReturnsMultipleResults()
    {
        // Arrange
        var packages = new List<LibmanPackage>
        {
            new() { Name = "jquery", Version = "3.6.0", Provider = "cdnjs" },
            new() { Name = "bootstrap", Version = "5.1.3", Provider = "cdnjs" }
        };

        var jqueryAdvisories = new List<GitHubAdvisory>
        {
            new() { Severity = "Low", Description = "Low severity issue" }
        };

        var bootstrapAdvisories = new List<GitHubAdvisory>
        {
            new() { Severity = "High", Description = "High severity issue" }
        };

        _advisoryClient.GetAdvisoriesAsync("jquery", "3.6.0")
            .Returns(new AdvisoryResult(jqueryAdvisories));

        _advisoryClient.GetAdvisoriesAsync("bootstrap", "5.1.3")
            .Returns(new AdvisoryResult(bootstrapAdvisories));

        // Act
        var result = await _sut.AnalyzePackagesAsync(packages);

        // Assert
        Assert.Equal(2, result.Count);
        
        var jqueryResult = result.First(p => p.Name == "jquery");
        Assert.Equal("Low", jqueryResult.Severity);
        Assert.Equal(1, jqueryResult.VulnerabilityCount);
        
        var bootstrapResult = result.First(p => p.Name == "bootstrap");
        Assert.Equal("High", bootstrapResult.Severity);
        Assert.Equal(1, bootstrapResult.VulnerabilityCount);
    }

    [Fact]
    public async Task AnalyzePackagesAsync_SamePackageMultipleProviders_ReturnsSeparateResults()
    {
        // Arrange
        var packages = new List<LibmanPackage>
        {
            new() { Name = "jquery", Version = "3.6.0", Provider = "cdnjs" },
            new() { Name = "jquery", Version = "3.6.0", Provider = "unpkg" }
        };

        var advisories = new List<GitHubAdvisory>
        {
            new() { Severity = "Medium", Description = "Medium severity issue" }
        };

        _advisoryClient.GetAdvisoriesAsync("jquery", "3.6.0")
            .Returns(new AdvisoryResult(advisories));

        // Act
        var result = await _sut.AnalyzePackagesAsync(packages);

        // Assert
        Assert.Equal(2, result.Count);
        Assert.Equal("cdnjs", result[0].Provider);
        Assert.Equal("unpkg", result[1].Provider);
    }

    [Fact]
    public async Task AnalyzePackagesAsync_ExceptionThrown_LogsWarningAndReturnsEmptyList()
    {
        // Arrange
        var packages = new List<LibmanPackage>
        {
            new() { Name = "jquery", Version = "3.6.0", Provider = "cdnjs" }
        };

        _advisoryClient.GetAdvisoriesAsync(Arg.Any<string>(), Arg.Any<string>())
            .Returns(Task.FromException<AdvisoryResult>(new Exception("Test exception")));

        // Act
        var result = await _sut.AnalyzePackagesAsync(packages);

        // Assert
        Assert.Empty(result);
        _logger.Received(1).LogWarning(Arg.Is<string>(s => s.Contains("Test exception")));
    }
}
